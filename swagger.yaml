paths:
  /api/auth/signup:
    post:
      summary: Register a new user prodil and send a verification email
      description: The first profil registered in the system is the `User` role.
      tags:
        - Authentification
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sexe:
                  type: string
                  example: "male"
                firstname:
                  type: string
                  example: "Jason"
                name:
                  type: string
                  example: "Watmore"
                email:
                  type: string
                  example: "jason@example.com"
                password:
                  type: string
                  example: "pass123"
                confirmPassword:
                  type: string
                  example: "pass123"
                # acceptTerms:
                #   type: boolean
              required:
                - title
                - firstName
                - lastName
                - email
                - password
                - confirmPassword
                #- acceptTerms
      responses:
        "200":
          description: The registration request was successful and a verification email has been sent to the specified email address
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registration successful, please check your email for verification instructions"

  /api/auth/login:
    post:
      summary: login in user account
      description: Welcome back in Groupomania
      tags:
        - Authentification
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "jason@example.com"
                password:
                  type: string
                  example: "pass123"
      responses:
        200:
          description: login with successful !
        500:
          description: response

  /api/profil/:id:
    get:
      description: get you're profil
      summary: get you're profil
      tags:
        - Profil
      response:
        200:
        description: response

    put:
      summary: Update you're profil
      description: The`Users`can update their profil.
      tags:
        - Profil
      operationId: update profil
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Mr"
                firstName:
                  type: string
                  example: "Jason"
                lastName:
                  type: string
                  example: "Watmore"
                email:
                  type: string
                  example: "jason@example.com"
                password:
                  type: string
                  example: "pass123"
                confirmPassword:
                  type: string
                  example: "pass123"
      responses:
        "200":
          description: Profil updated successfully. The details of the updated profil are returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  title:
                    type: string
                    example: "Mr"
                  firstName:
                    type: string
                    example: "Jason"
                  lastName:
                    type: string
                    example: "Watmore"
                  email:
                    type: string
                    example: "jason@example.com"
                  # created:
                  #   type: string
                  #   example: "2020-05-05T09:12:57.848Z"
                  # updated:
                  #   type: string
                  #   example: "2020-05-08T03:11:21.553Z"
    delete:
      summary: Delete you're profil
      description: The `User`can delete their own profil.
      tags:
        - Profil
      operationId: deleteAccount
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Account deleted successfully"

  /api/posts:
    get:
      description: Returns all pets from the system that the user has access to
      operationId: findPosts
      tags:
        - Posts
      responses:
        "200":
          description:  allPost response

    post:
      summary: create post
      description: create a post
      operationId: addPost
      tags:
        - Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Messi arrive au Psg c'est incroyable"
                text:
                  type: string
                  example: "ICI C'est PARIS !"
                img:
                  type: string
                  example: "Url img"
              required:
                - title
                - text
                - img
        response:
          201:
          description: response

  /api/posts/:id:
    get:
      summary: Returns a post by ID.
      tags:
        - Posts
      parameters:
        - name: postId
          in: path
          required: true
          description: The ID of the post to return.
          schema:
            type: integer
            format: int11
            minimum: 1
      responses:
        "200":
          description: A post object.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 1
                  title:
                    type: string
                    example: "mon nouveau Macbook 13 pouce"
                  text:
                    type: string
                    example: "il est trop jolie et super performant"
                  img:
                    type: string
                    example: "url de l'image"
        "400":
          description: The specified user ID is invalid (not a number).
        "404":
          description: A user with the specified ID was not found.
        default:
          description: Unexpected error
    put:
      summary: update your post
      description: update your post
      operationId: updatePost
      tags:
        - Posts
      parameters:
        - name: postId
          in: path
          required: true
          description: The ID of the post to return.
          schema:
            type: integer
            format: int11
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int11
                  example: 1
                title:
                  type: string
                  example: "mon nouveau Macbook 21 pouce"
                text:
                  type: string
                  example: "il est trop jolie et super performant"
                img:
                  type: string
                  example: "url de l'image"
            required:
              - title
              - text
              - img
      responses:
        "200":
          description: response

    delete:
      description: deletes a single post based on the ID supplied
      operationId: deletePost
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          description: ID of post to delete
          required: true
          type: integer
          format: int11
          example: 1
      responses:
        "200":
          description: pet deleted

  /api/comment:
    get:
      description: get all comment
      summary: get all comment
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                like:
                  type: number
                  example: 25
                dislike:
                  type: number
                  example: 3
      response:
        200:
        description: response

  /api/comment/id:
    get:
      description: get one comment
      summary: get one comment
      tags:
        - Comments
      response:
        200:
        description: response

    post:
      description: like one comment
      summary: like one comment
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                like:
                  type: number
                  example: 25
                dislike:
                  type: number
                  example: 7
        response:
          200:
          description: response

    delete:
      description: dislike one comment
      summary: dislike one comment
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                like:
                  type: number
                  example: 25
                dislike:
                  type: number
                  example: 771
      response:
        200:
        description: response

  /api/post/comment/postid:
    post:
      description: post one comment
      summary: post one comment
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: "Whaou j'adore !"
                like:
                  type: number
                  example: 0
                dislike:
                  type: number
                  example: 0
      response:
        200:
        description: response

  /api/update/comment/postid:
    put:
      description: update one comment
      summary: update one comment
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: "tu as eu un code promo ?"
                like:
                  type: number
                  example: 25
                dislike:
                  type: number
                  example: 3
      response:
        200:
        description: response

  /api/delete/comment/postid:
    delete:
      description: delete one comment
      summary: delete one comment
      tags:
        - Comments
      parameters:
        - in: body
          name:
            - delete one comment
      response:
        200:
        description: response

  /api/like/postid/userid:
    post:
      description: like one post
      summary: like one post
      tags:
        - Like
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                like:
                  type: number
                  example: 12
                dislike:
                  type: number
                  example: 8
        response:
          200:
          description: response

  /api/dislike/postid/userid:
    delete:
      description: dislike one post
      summary: dislike one post
      tags:
        - Like
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                like:
                  type: number
                  example: 12
                dislike:
                  type: number
                  example: 10
        response:
          200:
          description: response
