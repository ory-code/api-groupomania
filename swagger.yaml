paths:
  /api/auth/signup:
    post:
      summary: Register a new user prodil and send a verification email
      description: The first profil registered in the system is the `User` role.
      tags:
        - Authentification
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  example: "Jason"
                name:
                  type: string
                  example: "Watmore"
                email:
                  type: string
                  example: "jason@example.com"
                password:
                  type: string
                  example: "pass123"
              required:
                - firstname
                - name
                - email
                - password
      responses:
        "200":
          description: The registration request was successful and a verification email has been sent to the specified email address
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registration successful, please check your email for verification instructions"

  /api/auth/login:
    post:
      summary: login in user account
      description: Welcome back in Groupomania
      tags:
        - Authentification
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "jason@example.com"
                password:
                  type: string
                  example: "pass123"
      responses:
        200:
          description: login with successful !
        500:
          description: response

  /api/profil/{id}:
    get:
      summary: Returns a post by ID.
      tags:
        - Profil
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the profil to return.
          schema:
            type: integer
            format: int11
            minimum: 1
      responses:
        "200":
          description: A profil object.
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "Sacha"
                  firstname:
                    type: string
                    example: "ory"
                  img:
                    type: string
                    example: "url de l'image profil"
        "400":
          description: The specified user ID is invalid (not a number).
        "404":
          description: A user with the specified ID was not found.
        default:
          description: Unexpected error
    put:
      summary: update your profil
      description: update your profil
      operationId: updateProfil
      tags:
        - Profil
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the profil to return.
          schema:
            type: integer
            format: int11
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "sacha"
                firstname:
                  type: string
                  example: "ory"
            required:
              - firstname
              - name
      responses:
        "200":
          description: response

    delete:
      description: deletes a profil based on the ID supplied
      operationId: deleteProfil
      tags:
        - Profil
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          description: ID of profil to delete
          required: true
          type: integer
          format: int11
          example: 1
      responses:
        "200":
          description: profil deleted

  /api/posts:
    get:
      description: Returns all post from the system that the user has access to
      operationId: findPosts
      tags:
        - Posts
      security:
        - jwt: []
      responses:
        "200":
          description: allPost response

    post:
      summary: create post
      description: create a post
      operationId: addPost
      tags:
        - Posts
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: "ICI C'est PARIS !"
                img:
                  type: string
                  example: "Url img"
              required:
                - text
                - img
        response:
          201:
          description: response

  /api/posts/{id}:
    get:
      summary: Returns a post by ID.
      tags:
        - Posts
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to return.
          schema:
            type: integer
            format: int11
            minimum: 1
      responses:
        "200":
          description: A post object.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 1
                  text:
                    type: string
                    example: "il est trop jolie et super performant"
                  img:
                    type: string
                    example: "url de l'image"
        "400":
          description: The specified user ID is invalid (not a number).
        "404":
          description: A user with the specified ID was not found.
        default:
          description: Unexpected error
    put:
      summary: update your post
      description: update your post
      operationId: updatePost
      tags:
        - Posts
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to return.
          schema:
            type: integer
            format: int11
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: "il est trop jolie et super performant"
                img:
                  type: string
                  example: "url de l'image"
            required:
              - text
              - img
      responses:
        "200":
          description: response

    delete:
      description: deletes a single post based on the ID supplied
      operationId: deletePost
      tags:
        - Posts
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          description: ID of post to delete
          required: true
          type: integer
          format: int11
          example: 1
      responses:
        "200":
          description: post deleted

  /api/posts/{id}/like:
    post:
      summary: like a post
      description: post a like on a post
      operationId: post a like
      tags: 
        - like
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to return.
          schema:
            type: integer
            format: int11
            minimum: 1
      requestBody:
        required: true
        content:
          aplication/json:
            schema:
              type: object
              properties:
                liked:
                  type: number
                  example:
                    - 1 
              required:
                 - liked
        response:
          200:
          description: response
  /api/posts/{id}/dislike:
    post:
      summary: dislike a post
      description: post a dislike on a post
      operationId: post a dislike
      tags: 
        - like
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to return.
          schema:
            type: integer
            format: int11
            minimum: 1
      requestBody:
        required: true
        content:
          aplication/json:
            schema:
              type: object
              properties:
                disliked:
                  type: number
                  example:
                    - -1 
              required:
                 - disliked
        response:
          200:
          description: response

  /api/posts/{id}/comments:
    get:
      description: Returns all comments from the system that the user has access to
      operationId: findAllComments
      tags:
        - Comments
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to return.
          schema:
            type: integer
            format: int11
            minimum: 1
      responses:
        "200":
          description: allComment response

    post:
      summary: create comment
      description: create a comment
      operationId: addComment
      tags:
        - Comments
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to return.
          schema:
            type: integer
            format: int11
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: "J'adore le PSG"
              required:
                - content
        response:
          201:
          description: response

  /api/posts/{id}/comments/{id}:
    get:
      summary: Returns a comment by ID.
      tags:
        - Comments
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the comment to return.
          schema:
            type: integer
            format: int11
            minimum: 1
      responses:
        "200":
          description: response
    put:
      summary: update your comment
      description: update your comment
      operationId: updateComment
      tags:
        - Comments
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the comment to return.
          schema:
            type: integer
            format: int11
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: "Paris est magique"
            required:
              - content
      responses:
        "200":
          description: response

    delete:
      description: deletes a single comment based on the ID supplied
      operationId: deletePost
      tags:
        - Comments
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          description: ID of comment to delete
          required: true
          type: integer
          format: int11
          example: 1
      responses:
        "200":
          description: comment deleted